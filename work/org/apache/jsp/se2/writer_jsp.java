/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.40
 * Generated at: 2021-01-06 06:08:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.se2;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class writer_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=euc-kr");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("euc-kr"); 
      out.write("\r\n");
      out.write("<script type=\"text/javascript\" src=\"./js/HuskyEZCreator.js\" charset=\"utf-8\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"./photo_uploader/plugin/hp_SE2M_AttachQuickPhoto.js\" charset=\"utf-8\"></script>\r\n");
      out.write("<div style=\"margin-left: 500px; font-weight: bolder;\" >\r\n");
      out.write("\t\t<h1>글쓰기</h1>\r\n");
      out.write("</div><br>\r\n");
      out.write("\t\t\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar oEditors = [];\r\n");
      out.write("\t// 추가 글꼴 목록\r\n");
      out.write("\t//var aAdditionalFontSet = [[\"MS UI Gothic\", \"MS UI Gothic\"], [\"Comic Sans MS\", \"Comic Sans MS\"],[\"TEST\",\"TEST\"]];\r\n");
      out.write("\tnhn.husky.EZCreator.createInIFrame({\r\n");
      out.write("\toAppRef : oEditors,\r\n");
      out.write("\t\telPlaceHolder : \"content\",\r\n");
      out.write("\t\tsSkinURI : \"./SmartEditor2Skin.html\",\r\n");
      out.write("\t\thtParams : {\r\n");
      out.write("\t\t\tbUseToolbar : true, // 툴바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\tbUseVerticalResizer : true, // 입력창 크기 조절바 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\tbUseModeChanger : true, // 모드 탭(Editor | HTML | TEXT) 사용 여부 (true:사용/ false:사용하지 않음)\r\n");
      out.write("\t\t\t//aAdditionalFontList : aAdditionalFontSet,\t\t// 추가 글꼴 목록\r\n");
      out.write("\t\t\tfOnBeforeUnload : function() {\r\n");
      out.write("\t\t\t\t//alert(\"완료!\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}, //boolean\r\n");
      out.write("\t\tfOnAppLoad : function() {\r\n");
      out.write("\t\t\t//예제 코드\r\n");
      out.write("\t\t\t//oEditors.getById[\"ir1\"].exec(\"PASTE_HTML\", [\"로딩이 완료된 후에 본문에 삽입되는 text입니다.\"]);\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\tfCreator : \"createSEditor2\"\r\n");
      out.write("\t});\r\n");
      out.write("\r\n");
      out.write("\t/* function pasteHTML() {\r\n");
      out.write("\t\tvar sHTML = \"<span style='color:#FF0000;'>이미지도 같은 방식으로 삽입합니다.<\\/span>\";\r\n");
      out.write("\t\toEditors.getById[\"content\"].exec(\"PASTE_HTML\", [ sHTML ]);\r\n");
      out.write("\t} \r\n");
      out.write("\t\r\n");
      out.write("\tfunction pasteHTML(filepath){ \r\n");
      out.write("        var sHTML = '<span style=\"color:#FF0000;\"><img src=\"'+filepath+'\"></span>'; \r\n");
      out.write("        alert(sHTML); \r\n");
      out.write("        oEditors.getById[\"content\"].exec(\"PASTE_HTML\", [sHTML]); \r\n");
      out.write("\t} */\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction pasteHTML(filepath){\r\n");
      out.write("\t    var sHTML = '<img src=\"./upload/'+filepath+'\">';\r\n");
      out.write("\t    oEditors.getById[\"content\"].exec(\"PASTE_HTML\", [sHTML]); \r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction showHTML() {\r\n");
      out.write("\t\tvar sHTML = oEditors.getById[\"content\"].getIR();\r\n");
      out.write("\t\talert(sHTML);\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\tfunction submitContents(elClickedObj) {\r\n");
      out.write("\t\t// 에디터의 내용이 textarea에 적용됩니다.\r\n");
      out.write("\t\toEditors.getById[\"content\"].exec(\"UPDATE_CONTENTS_FIELD\", []);\r\n");
      out.write("\t\t// 에디터의 내용에 대한 값 검증은 이곳에서 document.getElementById(\"ir1\").value를 이용해서 처리하면 됩니다.\t\t\r\n");
      out.write("\t\ttry {\r\n");
      out.write("\t\t\telClickedObj.form.submit();\t\t\t\r\n");
      out.write("\t\t} catch (e) {\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfunction setDefaultFont() {\r\n");
      out.write("\t\tvar sDefaultFont = '궁서';\r\n");
      out.write("\t\tvar nFontSize = 24;\r\n");
      out.write("\t\toEditors.getById[\"content\"].setDefaultFont(sDefaultFont, nFontSize);\r\n");
      out.write("\t}\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
