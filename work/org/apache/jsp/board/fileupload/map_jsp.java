/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.40
 * Generated at: 2020-12-18 03:31:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board.fileupload;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

		request.setCharacterEncoding("utf-8");
		String lat = request.getParameter("lat");//위도
		String lng = request.getParameter("lng");//경도
		String main_img_thumb = request.getParameter("main_img_thumb");//썸네일
		String main_title = request.getParameter("main_title");//제목
		String addr1 = request.getParameter("addr1");//주소
		String homepage_url = request.getParameter("homepage_url");//홈페이지
		String cntct_tel = request.getParameter("cntct_tel");//연락처

      out.write("\r\n");
      out.write("<!DOCTYPE HTML>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>TIB Map</title>\r\n");
      out.write("    <style>\r\n");
      out.write("    .wrap {position: absolute;left: 0;bottom: 40px;width: 288px;height: 132px;margin-left: -144px;text-align: left;overflow: hidden;font-size: 12px;font-family: 'Malgun Gothic', dotum, '돋움', sans-serif;line-height: 1.5;}\r\n");
      out.write("    .wrap * {padding: 0;margin: 0;}\r\n");
      out.write("    .wrap .info {width: 286px;height: 120px;border-radius: 5px;border-bottom: 2px solid #ccc;border-right: 1px solid #ccc;overflow: hidden;background: #fff;}\r\n");
      out.write("    .wrap .info:nth-child(1) {border: 0;box-shadow: 0px 1px 2px #888;}\r\n");
      out.write("    .info .title {padding: 5px 0 0 10px;height: 30px;background: #eee;border-bottom: 1px solid #ddd;font-size: 18px;font-weight: bold;}\r\n");
      out.write("    .info .close {position: absolute;top: 10px;right: 10px;color: #888;width: 17px;height: 17px;background: url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/overlay_close.png');}\r\n");
      out.write("    .info .close:hover {cursor: pointer;}\r\n");
      out.write("    .info .body {position: relative;overflow: hidden;}\r\n");
      out.write("    .info .desc {position: relative;margin: 13px 0 0 90px;height: 75px;}\r\n");
      out.write("    .desc .ellipsis {overflow: hidden;text-overflow: ellipsis;white-space: nowrap;}\r\n");
      out.write("    .desc .jibun {font-size: 11px;color: #888;margin-top: -2px;}\r\n");
      out.write("    .info .img {position: absolute;top: 6px;left: 5px;width: 73px;height: 71px;border: 1px solid #ddd;color: #888;overflow: hidden;}\r\n");
      out.write("    .info:after {content: '';position: absolute;margin-left: -12px;left: 50%;bottom: 0;width: 22px;height: 12px;background: url('https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/vertex_white.png')}\r\n");
      out.write("    .info .link {color: #5085BB;}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"map\" style=\"width:100%;height:350px;\"></div>\r\n");
      out.write("<script type=\"text/javascript\" src=\"//dapi.kakao.com/v2/maps/sdk.js?appkey=9d998a289b03357b5e4403f9bd48c81d\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("var mapContainer = document.getElementById('map'), // 지도의 중심좌표\r\n");
      out.write("    mapOption = { \r\n");
      out.write("        center: new kakao.maps.LatLng(");
      out.print(lat);
      out.write(',');
      out.write(' ');
      out.print(lng);
      out.write("), // 지도의 중심좌표\r\n");
      out.write("        level: 3 // 지도의 확대 레벨\r\n");
      out.write("    }; \r\n");
      out.write("\r\n");
      out.write("var map = new kakao.maps.Map(mapContainer, mapOption); // 지도를 생성합니다\r\n");
      out.write("\r\n");
      out.write("// 지도에 마커를 표시합니다 \r\n");
      out.write("var marker = new kakao.maps.Marker({\r\n");
      out.write("    map: map, \r\n");
      out.write("    position: new kakao.maps.LatLng(");
      out.print(lat);
      out.write(',');
      out.write(' ');
      out.print(lng);
      out.write(")\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 커스텀 오버레이에 표시할 컨텐츠 입니다\r\n");
      out.write("// 커스텀 오버레이는 아래와 같이 사용자가 자유롭게 컨텐츠를 구성하고 이벤트를 제어할 수 있기 때문에\r\n");
      out.write("// 별도의 이벤트 메소드를 제공하지 않습니다 \r\n");
      out.write("var content = '<div class=\"wrap\">' + \r\n");
      out.write("            '    <div class=\"info\">' + \r\n");
      out.write("            '        <div class=\"title\">' + \r\n");
      out.write("            '            ");
      out.print(main_title);
      out.write("' + \r\n");
      out.write("            '            <div class=\"close\" onclick=\"closeOverlay()\" title=\"닫기\"></div>' + \r\n");
      out.write("            '        </div>' + \r\n");
      out.write("            '        <div class=\"body\">' + \r\n");
      out.write("            '            <div class=\"img\">' +\r\n");
      out.write("            '                <img src=\"https://www.visitbusan.net/");
      out.print(main_img_thumb);
      out.write("\" width=83 height=64>' +\r\n");
      out.write("            '           </div>' + \r\n");
      out.write("            '            <div class=\"desc\">' + \r\n");
      out.write("            '                <div class=\"ellipsis\">");
      out.print(addr1);
      out.write("</div>' + \r\n");
      out.write("            '                <div class=\"jibun ellipsis\">");
      out.print(cntct_tel);
      out.write("</div>' + \r\n");
      out.write("            '                <div><a href=\"");
      out.print(homepage_url);
      out.write("\" target=\"_blank\" class=\"link\">홈페이지</a></div>' + \r\n");
      out.write("            '            </div>' + \r\n");
      out.write("            '        </div>' + \r\n");
      out.write("            '    </div>' +    \r\n");
      out.write("            '</div>';\r\n");
      out.write("\r\n");
      out.write("// 마커 위에 커스텀오버레이를 표시합니다\r\n");
      out.write("// 마커를 중심으로 커스텀 오버레이를 표시하기위해 CSS를 이용해 위치를 설정했습니다\r\n");
      out.write("var overlay = new kakao.maps.CustomOverlay({\r\n");
      out.write("    content: content,\r\n");
      out.write("    map: map,\r\n");
      out.write("    position: marker.getPosition()       \r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 마커를 클릭했을 때 커스텀 오버레이를 표시합니다\r\n");
      out.write("kakao.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("    overlay.setMap(map);\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("// 커스텀 오버레이를 닫기 위해 호출되는 함수입니다 \r\n");
      out.write("function closeOverlay() {\r\n");
      out.write("    overlay.setMap(null);     \r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
