/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.40
 * Generated at: 2021-01-12 05:38:18 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.netpidia;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class login3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 넷피디아 -->\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String id = request.getParameter("id");
	String pwd = request.getParameter("pwd");	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang = \"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"EUC-KR\">\r\n");
      out.write("\t<title>로그인</title>\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"inup.css\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\">\t\r\n");
      out.write("\t<script type=\"text/javascript\" src=\"https://static.nid.naver.com/js/naveridlogin_js_sdk_2.0.0.js\" charset=\"utf-8\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\tfunction loginCheck() {\r\n");
      out.write("\t\tif (document.loginFrm.id.value == \"\") {\r\n");
      out.write("\t\t\talert(\"아이디를 입력해 주세요.\");\r\n");
      out.write("\t\t\tdocument.loginFrm.id.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (document.loginFrm.pwd.value == \"\") {\r\n");
      out.write("\t\t\talert(\"비밀번호를 입력해 주세요.\");\r\n");
      out.write("\t\t\tdocument.loginFrm.pwd.focus();\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tdocument.loginFrm.submit();\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\t\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<section class = \"login-form\">\t\r\n");
      out.write("\t<h1>NETPIDIA</h1>\t\r\n");
      out.write("\t\t<form name=\"loginFrm\" method=\"post\" action=\"loginProc.jsp\">\r\n");
      out.write("\t\t\t<div class=\"int-area\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" name = \"id\" id=\"id\"\r\n");
      out.write("\t\t\t\tautocomplete=\"off\" required>\r\n");
      out.write("\t\t\t\t<label for =\"id\">USER ID</label>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"int-area\">\r\n");
      out.write("\t\t\t\t<input type=\"password\" name = \"pwd\" id=\"pw\"\r\n");
      out.write("\t\t\t\tautocomplete=\"off\" required>\r\n");
      out.write("\t\t\t\t<label for =\"pw\">PASSWORD</label>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div class=\"btn-area\">\r\n");
      out.write("\t\t\t\t<button type=\"submit\" onclick=\"loginCheck()\">LOGIN</button>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<div id=\"naverIdLogin\" style=\"margin-top: 20px; margin-left: 80px;\"></div>\t\t\t\t\t\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t<div class=\"caption\">\r\n");
      out.write("\t\t\t<a href=\"#\" onClick=\"javascript:location.href='find.jsp'\">Forgot password?</a>\r\n");
      out.write("\t\t<p>\r\n");
      out.write("\t\t\t<a class=\"txt1 bo1 hov1\" href=\"#\" onClick=\"javascript:location.href='join.jsp'\">Sign up</a>\r\n");
      out.write("\t\t</div>\t\t\t\t\t\t\r\n");
      out.write("\t</section>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\tvar naverLogin = new naver.LoginWithNaverId(\r\n");
      out.write("\t\t{\r\n");
      out.write("\t\t\tclientId: \"rGZ8kQ2SmYggqkpxeV0e\",\r\n");
      out.write("\t\t\tcallbackUrl: \"http://localhost/myapp/a123/callback.jsp\",\r\n");
      out.write("\t\t\tisPopup: false, /* 팝업을 통한 연동처리 여부 */\r\n");
      out.write("\t\t\tloginButton: {color: \"white\", type: 3, height: 50} /* 로그인 버튼의 타입을 지정 */\r\n");
      out.write("\t\t}\r\n");
      out.write("\t);\t\r\n");
      out.write("\t/* 설정정보를 초기화하고 연동을 준비 */\r\n");
      out.write("\tnaverLogin.init();\t\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\t");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
